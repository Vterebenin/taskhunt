{"version":3,"sources":["components/MainLayout/Index.js","App.js","serviceWorker.js","index.js"],"names":["MainLayout","config","url","_useState","useState","_useState2","Object","slicedToArray","tasks","setTasks","_useState3","_useState4","username","setUsername","_useState5","_useState6","pass","setPass","_useState7","_useState8","loading","setLoading","_useState9","_useState10","hunted","setHunted","useEffect","listOf","canBeHunted","arguments","length","undefined","map","task","taskId","id","react_default","a","createElement","key","href","concat","onClick","console","log","includes","toConsumableArray","handleTaskClick","Fragment","onSubmit","event","basicAuth","btoa","axios","get","headers","Authorization","then","response","data","issues","preventDefault","type","value","onChange","target","className","App","Index","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.682d2ddd.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\n\r\nfunction MainLayout() {\r\n  const config = {\r\n    url: \"https://cors-anywhere.herokuapp.com/https://redmine.twinscom.ru\"\r\n  }\r\n\r\n  const [tasks, setTasks] = useState(null)\r\n  const [username, setUsername] = useState('')\r\n  const [pass, setPass] = useState('')\r\n  const [loading, setLoading] = useState(false)\r\n  const [hunted, setHunted] = useState([])\r\n\r\n  useEffect(() => {\r\n\r\n\r\n  })\r\n\r\n  function handleNameChange(event) {\r\n    setUsername(event.target.value)\r\n  }\r\n\r\n  function handlePassChange(event) {\r\n    setPass(event.target.value)\r\n  }\r\n\r\n  function handleSubmit(event) {\r\n    var basicAuth = 'Basic ' + btoa(username + ':' + pass);\r\n    setLoading(true);\r\n    axios.get(`${config.url}/issues.json?assigned_to_id=me`, {\r\n      headers: {\r\n        \"Authorization\": basicAuth,\r\n      }\r\n    })\r\n      .then(response => response.data)\r\n      .then(data => { setLoading(false); setTasks(data.issues) })\r\n\r\n    event.preventDefault();\r\n  }\r\n\r\n  function handleTaskClick(taskId) {\r\n    console.log(hunted);\r\n    return hunted.includes(taskId)\r\n      ? false\r\n      : setHunted([...hunted, taskId])\r\n  }\r\n\r\n  const listOf = (tasks, canBeHunted = false) => {\r\n    return tasks.map((task) => {\r\n      const taskId = task.id || task\r\n      return (\r\n        <li key={taskId} >\r\n          <a href={`https://redmine.twinscom.ru/issues/${taskId}`}>{taskId}</a>\r\n          {canBeHunted && <span onClick={() => handleTaskClick(taskId)}>Назначить охоту</span>}\r\n        </li>\r\n      )\r\n    })\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <form onSubmit={handleSubmit}>\r\n        <label>\r\n          Имя пользователя в редмайне:\r\n          <input type=\"text\" value={username} onChange={handleNameChange} />\r\n        </label>\r\n        <label>\r\n          Редмайновский пасс:\r\n          <input type=\"password\" value={pass} onChange={handlePassChange} />\r\n        </label>\r\n        <div className=\"reminder\">\r\n          *Эти данные нигде не будут сохранены ( кроме текущей сессии, конечно :P )\r\n        </div>\r\n        <input type=\"submit\" value=\"Войти\" />\r\n      </form>\r\n      {tasks &&\r\n        <React.Fragment>\r\n          <h2>Твои таски:</h2>\r\n          <ul>\r\n            {listOf(tasks, true)}\r\n          </ul>\r\n        </React.Fragment>\r\n      }\r\n      {hunted.length > 0 &&\r\n        <React.Fragment>\r\n          <h2>Текущие таски поставленные в охоту:</h2>\r\n          <ul>\r\n            {listOf(hunted)}\r\n          </ul>\r\n        </React.Fragment>\r\n      }\r\n      {!tasks && loading &&\r\n        <React.Fragment>\r\n          <h1> Я тут фетчу вообще-та... </h1>\r\n        </React.Fragment>\r\n      }\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default MainLayout\r\n","import React from 'react';\nimport './App.css';\nimport MainLayout from './components/MainLayout/Index'\n\nfunction App() {\n  return (\n    <>\n      <MainLayout />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}